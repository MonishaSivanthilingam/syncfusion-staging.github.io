{"version":3,"sources":["App.tsx","react-config.ts","index.tsx"],"names":["App","data","props","undefined","className","style","width","id","type","name","placeholder","data-name","dataSource","format","value","Date","startTime","StartTime","endTime","EndTime","rows","cols","height","resize","selectedDate","eventSettings","this","editorTemplate","bind","showQuickInfo","option","services","Day","Week","WorkWeek","Month","Resize","DragAndDrop","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","process","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","reactConfiguration"],"mappings":"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","file":"static/js/main.3d98817a.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {\n  ScheduleComponent, ViewsDirective, ViewDirective, Day, Week, WorkWeek, Month, Inject, Resize, DragAndDrop\n} from '@syncfusion/ej2-react-schedule';\nimport { DateTimePickerComponent } from '@syncfusion/ej2-react-calendars';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\nimport \"./App.css\";\n\n/**\n * Schedule editor template sample\n */\n\nexport default class App extends React.PureComponent<{}, {}> {\n  private data: Object[] = [];\n  private editorTemplate(props: any): JSX.Element {\n    return ((props !== undefined) ? <table className=\"custom-event-editor\" style={{ width: '100%' }}><tbody>\n      <tr><td className=\"e-textlabel\">Summary</td><td>\n        <input id=\"Summary\" className=\"e-field e-input\" type=\"text\" name=\"Subject\" style={{ width: '100%' }} />\n      </td></tr>\n      <tr><td className=\"e-textlabel\">Status</td><td>\n        <DropDownListComponent id=\"EventType\" placeholder='Choose status' data-name='EventType' className=\"e-field\" style={{ width: '100%' }}\n          dataSource={['New', 'Requested', 'Confirmed']}>\n        </DropDownListComponent>\n      </td></tr>\n      <tr><td className=\"e-textlabel\">From</td><td>\n        <DateTimePickerComponent id=\"StartTime\" format='dd/MM/yy hh:mm a' data-name=\"StartTime\" value={new Date(props.startTime || props.StartTime)}\n          className=\"e-field\"></DateTimePickerComponent>\n      </td></tr>\n      <tr><td className=\"e-textlabel\">To</td><td>\n        <DateTimePickerComponent id=\"EndTime\" format='dd/MM/yy hh:mm a' data-name=\"EndTime\" value={new Date(props.endTime || props.EndTime)}\n          className=\"e-field\"></DateTimePickerComponent>\n      </td></tr>\n      <tr><td className=\"e-textlabel\">Reason</td><td>\n        <textarea id=\"Description\" className=\"e-field e-input\" name=\"Description\" rows={3} cols={50}\n          style={{ width: '100%', height: '60px !important', resize: 'vertical' }}></textarea>\n      </td></tr></tbody></table > : <div></div>);\n  }\n  render() {\n    return (\n      <div className='schedule-control-section'>\n        <div className='col-lg-12 control-section'>\n          <div className='control-wrapper'>\n            <ScheduleComponent width='100%' height='650px' selectedDate={new Date(2018, 1, 15)} eventSettings={{ dataSource: this.data }}\n              editorTemplate={this.editorTemplate.bind(this)} showQuickInfo={false}>\n              <ViewsDirective>\n                <ViewDirective option='Day' />\n                <ViewDirective option='Week' />\n                <ViewDirective option='WorkWeek' />\n                <ViewDirective option='Month' />\n              </ViewsDirective>\n              <Inject services={[Day, Week, WorkWeek, Month, Resize, DragAndDrop]} />\n            </ScheduleComponent>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reactConfiguration from \"./react-config\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nreactConfiguration();\n"],"sourceRoot":""}